Grammar

    0 $accept: program $end

    1 program: declaration_list

    2 declaration_list: declaration_list declaration
    3                 | declaration

    4 declaration: var_declaration
    5            | fun_declaration

    6 var_declaration: type_specifier declare_id pid ID ';'
    7                | type_specifier declare_id pid ID '[' size NUM ']' ';'

    8 type_specifier: "int"
    9               | "void"

   10 fun_declaration: type_specifier declare_id pid ID '(' params ')' end_declare compound_stmt

   11 params: param_list
   12       | "void"

   13 param_list: param_list ',' param
   14           | param

   15 param: type_specifier declare_id pid ID
   16      | type_specifier declare_id pid ID '[' ']'

   17 compound_stmt: '{' local_declarations statement_list '}'

   18 local_declarations: local_declarations var_declaration
   19                   | ε

   20 statement_list: statement_list statement
   21               | ε

   22 statement: expression_stmt
   23          | compound_stmt
   24          | selection_stmt
   25          | iteration_stmt
   26          | return_stmt
   27          | switch_stmt

   28 expression_stmt: expression finish_exp ';'
   29                | "break" ';'
   30                | ';'

   31 selection_stmt: "if" '(' expression condition ')' save statement "endif"
   32               | "if" '(' expression condition ')' save statement "else" jpf_save statement "endif"

   33 iteration_stmt: "while" label '(' expression condition ')' save statement

   34 return_stmt: "return" ';'
   35            | "return" expression ';'

   36 switch_stmt: start_switch "switch" '(' expression ')' fake_save '{' case_stmts default_stmt '}'

   37 case_stmts: case_stmts case_stmt
   38           | ε

   39 case_stmt: jp_case "case" case_condition NUM save ':' statement_list

   40 default_stmt: jp_case "default" ':' statement_list
   41             | ε

   42 expression: var '=' expression
   43           | simple_expression

   44 var: declare_id pid ID
   45    | declare_id pid ID '[' expression ']'

   46 simple_expression: additive_expression relop additive_expression
   47                  | additive_expression

   48 relop: op '<'
   49      | op "=="

   50 additive_expression: additive_expression addop term
   51                    | term

   52 addop: op '+'
   53      | op '-'

   54 term: term mulop factor
   55     | factor

   56 mulop: op '*'
   57      | op '/'

   58 factor: '(' expression ')'
   59       | var
   60       | call
   61       | num NUM

   62 call: declare_id pid ID '(' args add_args ')'

   63 add_args: ε

   64 args: arg_list
   65     | ε

   66 arg_list: arg_list ',' expression
   67         | expression

   68 save: ε

   69 jpf_save: ε

   70 label: ε

   71 start_switch: ε

   72 pid: ε

   73 declare_id: ε

   74 end_declare: ε

   75 op: ε

   76 num: ε

   77 condition: ε

   78 size: ε

   79 finish_exp: ε

   80 case_condition: ε

   81 fake_save: ε

   82 jp_case: ε


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 10 31 32 33 36 58 62
    ')' (41) 10 31 32 33 36 58 62
    '*' (42) 56
    '+' (43) 52
    ',' (44) 13 66
    '-' (45) 53
    '/' (47) 57
    ':' (58) 39 40
    ';' (59) 6 7 28 29 30 34 35
    '<' (60) 48
    '=' (61) 42
    '[' (91) 7 16 45
    ']' (93) 7 16 45
    '{' (123) 17 36
    '}' (125) 17 36
    error (256)
    NUM (258) 7 39 61
    ID (259) 6 7 10 15 16 44 45 62
    "int" (260) 8
    "void" (261) 9 12
    "break" (262) 29
    "if" (263) 31 32
    "endif" (264) 31 32
    "else" (265) 32
    "while" (266) 33
    "return" (267) 34 35
    "switch" (268) 36
    "case" (269) 39
    "default" (270) 40
    "==" (271) 49


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    program (33)
        on left: 1
        on right: 0
    declaration_list (34)
        on left: 2 3
        on right: 1 2
    declaration (35)
        on left: 4 5
        on right: 2 3
    var_declaration (36)
        on left: 6 7
        on right: 4 18
    type_specifier (37)
        on left: 8 9
        on right: 6 7 10 15 16
    fun_declaration (38)
        on left: 10
        on right: 5
    params (39)
        on left: 11 12
        on right: 10
    param_list (40)
        on left: 13 14
        on right: 11 13
    param (41)
        on left: 15 16
        on right: 13 14
    compound_stmt (42)
        on left: 17
        on right: 10 23
    local_declarations (43)
        on left: 18 19
        on right: 17 18
    statement_list (44)
        on left: 20 21
        on right: 17 20 39 40
    statement (45)
        on left: 22 23 24 25 26 27
        on right: 20 31 32 33
    expression_stmt (46)
        on left: 28 29 30
        on right: 22
    selection_stmt (47)
        on left: 31 32
        on right: 24
    iteration_stmt (48)
        on left: 33
        on right: 25
    return_stmt (49)
        on left: 34 35
        on right: 26
    switch_stmt (50)
        on left: 36
        on right: 27
    case_stmts (51)
        on left: 37 38
        on right: 36 37
    case_stmt (52)
        on left: 39
        on right: 37
    default_stmt (53)
        on left: 40 41
        on right: 36
    expression (54)
        on left: 42 43
        on right: 28 31 32 33 35 36 42 45 58 66 67
    var (55)
        on left: 44 45
        on right: 42 59
    simple_expression (56)
        on left: 46 47
        on right: 43
    relop (57)
        on left: 48 49
        on right: 46
    additive_expression (58)
        on left: 50 51
        on right: 46 47 50
    addop (59)
        on left: 52 53
        on right: 50
    term (60)
        on left: 54 55
        on right: 50 51 54
    mulop (61)
        on left: 56 57
        on right: 54
    factor (62)
        on left: 58 59 60 61
        on right: 54 55
    call (63)
        on left: 62
        on right: 60
    add_args (64)
        on left: 63
        on right: 62
    args (65)
        on left: 64 65
        on right: 62
    arg_list (66)
        on left: 66 67
        on right: 64 66
    save (67)
        on left: 68
        on right: 31 32 33 39
    jpf_save (68)
        on left: 69
        on right: 32
    label (69)
        on left: 70
        on right: 33
    start_switch (70)
        on left: 71
        on right: 36
    pid (71)
        on left: 72
        on right: 6 7 10 15 16 44 45 62
    declare_id (72)
        on left: 73
        on right: 6 7 10 15 16 44 45 62
    end_declare (73)
        on left: 74
        on right: 10
    op (74)
        on left: 75
        on right: 48 49 52 53 56 57
    num (75)
        on left: 76
        on right: 61
    condition (76)
        on left: 77
        on right: 31 32 33
    size (77)
        on left: 78
        on right: 7
    finish_exp (78)
        on left: 79
        on right: 28
    case_condition (79)
        on left: 80
        on right: 39
    fake_save (80)
        on left: 81
        on right: 36
    jp_case (81)
        on left: 82
        on right: 39 40


State 0

    0 $accept: • program $end
    1 program: • declaration_list
    2 declaration_list: • declaration_list declaration
    3                 | • declaration
    4 declaration: • var_declaration
    5            | • fun_declaration
    6 var_declaration: • type_specifier declare_id pid ID ';'
    7                | • type_specifier declare_id pid ID '[' size NUM ']' ';'
    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: • type_specifier declare_id pid ID '(' params ')' end_declare compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    program           go to state 3
    declaration_list  go to state 4
    declaration       go to state 5
    var_declaration   go to state 6
    type_specifier    go to state 7
    fun_declaration   go to state 8


State 1

    8 type_specifier: "int" •

    $default  reduce using rule 8 (type_specifier)


State 2

    9 type_specifier: "void" •

    $default  reduce using rule 9 (type_specifier)


State 3

    0 $accept: program • $end

    $end  shift, and go to state 9


State 4

    1 program: declaration_list •  [$end]
    2 declaration_list: declaration_list • declaration
    4 declaration: • var_declaration
    5            | • fun_declaration
    6 var_declaration: • type_specifier declare_id pid ID ';'
    7                | • type_specifier declare_id pid ID '[' size NUM ']' ';'
    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: • type_specifier declare_id pid ID '(' params ')' end_declare compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var_declaration  go to state 6
    type_specifier   go to state 7
    fun_declaration  go to state 8


State 5

    3 declaration_list: declaration •

    $default  reduce using rule 3 (declaration_list)


State 6

    4 declaration: var_declaration •

    $default  reduce using rule 4 (declaration)


State 7

    6 var_declaration: type_specifier • declare_id pid ID ';'
    7                | type_specifier • declare_id pid ID '[' size NUM ']' ';'
   10 fun_declaration: type_specifier • declare_id pid ID '(' params ')' end_declare compound_stmt
   73 declare_id: ε •

    $default  reduce using rule 73 (declare_id)

    declare_id  go to state 11


State 8

    5 declaration: fun_declaration •

    $default  reduce using rule 5 (declaration)


State 9

    0 $accept: program $end •

    $default  accept


State 10

    2 declaration_list: declaration_list declaration •

    $default  reduce using rule 2 (declaration_list)


State 11

    6 var_declaration: type_specifier declare_id • pid ID ';'
    7                | type_specifier declare_id • pid ID '[' size NUM ']' ';'
   10 fun_declaration: type_specifier declare_id • pid ID '(' params ')' end_declare compound_stmt
   72 pid: ε •

    $default  reduce using rule 72 (pid)

    pid  go to state 12


State 12

    6 var_declaration: type_specifier declare_id pid • ID ';'
    7                | type_specifier declare_id pid • ID '[' size NUM ']' ';'
   10 fun_declaration: type_specifier declare_id pid • ID '(' params ')' end_declare compound_stmt

    ID  shift, and go to state 13


State 13

    6 var_declaration: type_specifier declare_id pid ID • ';'
    7                | type_specifier declare_id pid ID • '[' size NUM ']' ';'
   10 fun_declaration: type_specifier declare_id pid ID • '(' params ')' end_declare compound_stmt

    ';'  shift, and go to state 14
    '['  shift, and go to state 15
    '('  shift, and go to state 16


State 14

    6 var_declaration: type_specifier declare_id pid ID ';' •

    $default  reduce using rule 6 (var_declaration)


State 15

    7 var_declaration: type_specifier declare_id pid ID '[' • size NUM ']' ';'
   78 size: ε •

    $default  reduce using rule 78 (size)

    size  go to state 17


State 16

    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: type_specifier declare_id pid ID '(' • params ')' end_declare compound_stmt
   11 params: • param_list
   12       | • "void"
   13 param_list: • param_list ',' param
   14           | • param
   15 param: • type_specifier declare_id pid ID
   16      | • type_specifier declare_id pid ID '[' ']'

    "int"   shift, and go to state 1
    "void"  shift, and go to state 18

    type_specifier  go to state 19
    params          go to state 20
    param_list      go to state 21
    param           go to state 22


State 17

    7 var_declaration: type_specifier declare_id pid ID '[' size • NUM ']' ';'

    NUM  shift, and go to state 23


State 18

    9 type_specifier: "void" •  [ID]
   12 params: "void" •  [')']

    ')'       reduce using rule 12 (params)
    $default  reduce using rule 9 (type_specifier)


State 19

   15 param: type_specifier • declare_id pid ID
   16      | type_specifier • declare_id pid ID '[' ']'
   73 declare_id: ε •

    $default  reduce using rule 73 (declare_id)

    declare_id  go to state 24


State 20

   10 fun_declaration: type_specifier declare_id pid ID '(' params • ')' end_declare compound_stmt

    ')'  shift, and go to state 25


State 21

   11 params: param_list •  [')']
   13 param_list: param_list • ',' param

    ','  shift, and go to state 26

    $default  reduce using rule 11 (params)


State 22

   14 param_list: param •

    $default  reduce using rule 14 (param_list)


State 23

    7 var_declaration: type_specifier declare_id pid ID '[' size NUM • ']' ';'

    ']'  shift, and go to state 27


State 24

   15 param: type_specifier declare_id • pid ID
   16      | type_specifier declare_id • pid ID '[' ']'
   72 pid: ε •

    $default  reduce using rule 72 (pid)

    pid  go to state 28


State 25

   10 fun_declaration: type_specifier declare_id pid ID '(' params ')' • end_declare compound_stmt
   74 end_declare: ε •

    $default  reduce using rule 74 (end_declare)

    end_declare  go to state 29


State 26

    8 type_specifier: • "int"
    9               | • "void"
   13 param_list: param_list ',' • param
   15 param: • type_specifier declare_id pid ID
   16      | • type_specifier declare_id pid ID '[' ']'

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    type_specifier  go to state 19
    param           go to state 30


State 27

    7 var_declaration: type_specifier declare_id pid ID '[' size NUM ']' • ';'

    ';'  shift, and go to state 31


State 28

   15 param: type_specifier declare_id pid • ID
   16      | type_specifier declare_id pid • ID '[' ']'

    ID  shift, and go to state 32


State 29

   10 fun_declaration: type_specifier declare_id pid ID '(' params ')' end_declare • compound_stmt
   17 compound_stmt: • '{' local_declarations statement_list '}'

    '{'  shift, and go to state 33

    compound_stmt  go to state 34


State 30

   13 param_list: param_list ',' param •

    $default  reduce using rule 13 (param_list)


State 31

    7 var_declaration: type_specifier declare_id pid ID '[' size NUM ']' ';' •

    $default  reduce using rule 7 (var_declaration)


State 32

   15 param: type_specifier declare_id pid ID •  [')', ',']
   16      | type_specifier declare_id pid ID • '[' ']'

    '['  shift, and go to state 35

    $default  reduce using rule 15 (param)


State 33

   17 compound_stmt: '{' • local_declarations statement_list '}'
   18 local_declarations: • local_declarations var_declaration
   19                   | ε •

    $default  reduce using rule 19 (local_declarations)

    local_declarations  go to state 36


State 34

   10 fun_declaration: type_specifier declare_id pid ID '(' params ')' end_declare compound_stmt •

    $default  reduce using rule 10 (fun_declaration)


State 35

   16 param: type_specifier declare_id pid ID '[' • ']'

    ']'  shift, and go to state 37


State 36

    6 var_declaration: • type_specifier declare_id pid ID ';'
    7                | • type_specifier declare_id pid ID '[' size NUM ']' ';'
    8 type_specifier: • "int"
    9               | • "void"
   17 compound_stmt: '{' local_declarations • statement_list '}'
   18 local_declarations: local_declarations • var_declaration
   20 statement_list: • statement_list statement
   21               | ε •  [NUM, ID, ';', '(', '{', '}', "break", "if", "while", "return", "switch"]

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 21 (statement_list)

    var_declaration  go to state 38
    type_specifier   go to state 39
    statement_list   go to state 40


State 37

   16 param: type_specifier declare_id pid ID '[' ']' •

    $default  reduce using rule 16 (param)


State 38

   18 local_declarations: local_declarations var_declaration •

    $default  reduce using rule 18 (local_declarations)


State 39

    6 var_declaration: type_specifier • declare_id pid ID ';'
    7                | type_specifier • declare_id pid ID '[' size NUM ']' ';'
   73 declare_id: ε •

    $default  reduce using rule 73 (declare_id)

    declare_id  go to state 41


State 40

   17 compound_stmt: • '{' local_declarations statement_list '}'
   17              | '{' local_declarations statement_list • '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression finish_exp ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression condition ')' save statement "endif"
   32               | • "if" '(' expression condition ')' save statement "else" jpf_save statement "endif"
   33 iteration_stmt: • "while" label '(' expression condition ')' save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • start_switch "switch" '(' expression ')' fake_save '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   71 start_switch: ε •  ["switch"]
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    ';'       shift, and go to state 42
    '('       shift, and go to state 43
    '{'       shift, and go to state 33
    '}'       shift, and go to state 44
    "break"   shift, and go to state 45
    "if"      shift, and go to state 46
    "while"   shift, and go to state 47
    "return"  shift, and go to state 48

    NUM       reduce using rule 76 (num)
    ID        reduce using rule 73 (declare_id)
    $default  reduce using rule 71 (start_switch)

    compound_stmt        go to state 49
    statement            go to state 50
    expression_stmt      go to state 51
    selection_stmt       go to state 52
    iteration_stmt       go to state 53
    return_stmt          go to state 54
    switch_stmt          go to state 55
    expression           go to state 56
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    start_switch         go to state 63
    declare_id           go to state 64
    num                  go to state 65


State 41

    6 var_declaration: type_specifier declare_id • pid ID ';'
    7                | type_specifier declare_id • pid ID '[' size NUM ']' ';'
   72 pid: ε •

    $default  reduce using rule 72 (pid)

    pid  go to state 66


State 42

   30 expression_stmt: ';' •

    $default  reduce using rule 30 (expression_stmt)


State 43

   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   58       | '(' • expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 76 (num)
    $default  reduce using rule 73 (declare_id)

    expression           go to state 67
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    declare_id           go to state 64
    num                  go to state 65


State 44

   17 compound_stmt: '{' local_declarations statement_list '}' •

    $default  reduce using rule 17 (compound_stmt)


State 45

   29 expression_stmt: "break" • ';'

    ';'  shift, and go to state 68


State 46

   31 selection_stmt: "if" • '(' expression condition ')' save statement "endif"
   32               | "if" • '(' expression condition ')' save statement "else" jpf_save statement "endif"

    '('  shift, and go to state 69


State 47

   33 iteration_stmt: "while" • label '(' expression condition ')' save statement
   70 label: ε •

    $default  reduce using rule 70 (label)

    label  go to state 70


State 48

   34 return_stmt: "return" • ';'
   35            | "return" • expression ';'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    ';'  shift, and go to state 71
    '('  shift, and go to state 43

    NUM       reduce using rule 76 (num)
    $default  reduce using rule 73 (declare_id)

    expression           go to state 72
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    declare_id           go to state 64
    num                  go to state 65


State 49

   23 statement: compound_stmt •

    $default  reduce using rule 23 (statement)


State 50

   20 statement_list: statement_list statement •

    $default  reduce using rule 20 (statement_list)


State 51

   22 statement: expression_stmt •

    $default  reduce using rule 22 (statement)


State 52

   24 statement: selection_stmt •

    $default  reduce using rule 24 (statement)


State 53

   25 statement: iteration_stmt •

    $default  reduce using rule 25 (statement)


State 54

   26 statement: return_stmt •

    $default  reduce using rule 26 (statement)


State 55

   27 statement: switch_stmt •

    $default  reduce using rule 27 (statement)


State 56

   28 expression_stmt: expression • finish_exp ';'
   79 finish_exp: ε •

    $default  reduce using rule 79 (finish_exp)

    finish_exp  go to state 73


State 57

   42 expression: var • '=' expression
   59 factor: var •  [';', ']', ')', ',', '<', "==", '+', '-', '*', '/']

    '='  shift, and go to state 74

    $default  reduce using rule 59 (factor)


State 58

   43 expression: simple_expression •

    $default  reduce using rule 43 (expression)


State 59

   46 simple_expression: additive_expression • relop additive_expression
   47                  | additive_expression •  [';', ']', ')', ',']
   48 relop: • op '<'
   49      | • op "=="
   50 additive_expression: additive_expression • addop term
   52 addop: • op '+'
   53      | • op '-'
   75 op: ε •  ['<', "==", '+', '-']

    '<'       reduce using rule 75 (op)
    "=="      reduce using rule 75 (op)
    '+'       reduce using rule 75 (op)
    '-'       reduce using rule 75 (op)
    $default  reduce using rule 47 (simple_expression)

    relop  go to state 75
    addop  go to state 76
    op     go to state 77


State 60

   51 additive_expression: term •  [';', ']', ')', ',', '<', "==", '+', '-']
   54 term: term • mulop factor
   56 mulop: • op '*'
   57      | • op '/'
   75 op: ε •  ['*', '/']

    '*'       reduce using rule 75 (op)
    '/'       reduce using rule 75 (op)
    $default  reduce using rule 51 (additive_expression)

    mulop  go to state 78
    op     go to state 79


State 61

   55 term: factor •

    $default  reduce using rule 55 (term)


State 62

   60 factor: call •

    $default  reduce using rule 60 (factor)


State 63

   36 switch_stmt: start_switch • "switch" '(' expression ')' fake_save '{' case_stmts default_stmt '}'

    "switch"  shift, and go to state 80


State 64

   44 var: declare_id • pid ID
   45    | declare_id • pid ID '[' expression ']'
   62 call: declare_id • pid ID '(' args add_args ')'
   72 pid: ε •

    $default  reduce using rule 72 (pid)

    pid  go to state 81


State 65

   61 factor: num • NUM

    NUM  shift, and go to state 82


State 66

    6 var_declaration: type_specifier declare_id pid • ID ';'
    7                | type_specifier declare_id pid • ID '[' size NUM ']' ';'

    ID  shift, and go to state 83


State 67

   58 factor: '(' expression • ')'

    ')'  shift, and go to state 84


State 68

   29 expression_stmt: "break" ';' •

    $default  reduce using rule 29 (expression_stmt)


State 69

   31 selection_stmt: "if" '(' • expression condition ')' save statement "endif"
   32               | "if" '(' • expression condition ')' save statement "else" jpf_save statement "endif"
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 76 (num)
    $default  reduce using rule 73 (declare_id)

    expression           go to state 85
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    declare_id           go to state 64
    num                  go to state 65


State 70

   33 iteration_stmt: "while" label • '(' expression condition ')' save statement

    '('  shift, and go to state 86


State 71

   34 return_stmt: "return" ';' •

    $default  reduce using rule 34 (return_stmt)


State 72

   35 return_stmt: "return" expression • ';'

    ';'  shift, and go to state 87


State 73

   28 expression_stmt: expression finish_exp • ';'

    ';'  shift, and go to state 88


State 74

   42 expression: • var '=' expression
   42           | var '=' • expression
   43           | • simple_expression
   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 76 (num)
    $default  reduce using rule 73 (declare_id)

    expression           go to state 89
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    declare_id           go to state 64
    num                  go to state 65


State 75

   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   46 simple_expression: additive_expression relop • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 76 (num)
    $default  reduce using rule 73 (declare_id)

    var                  go to state 90
    additive_expression  go to state 91
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    declare_id           go to state 64
    num                  go to state 65


State 76

   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   50 additive_expression: additive_expression addop • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 76 (num)
    $default  reduce using rule 73 (declare_id)

    var         go to state 90
    term        go to state 92
    factor      go to state 61
    call        go to state 62
    declare_id  go to state 64
    num         go to state 65


State 77

   48 relop: op • '<'
   49      | op • "=="
   52 addop: op • '+'
   53      | op • '-'

    '<'   shift, and go to state 93
    "=="  shift, and go to state 94
    '+'   shift, and go to state 95
    '-'   shift, and go to state 96


State 78

   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   54 term: term mulop • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 76 (num)
    $default  reduce using rule 73 (declare_id)

    var         go to state 90
    factor      go to state 97
    call        go to state 62
    declare_id  go to state 64
    num         go to state 65


State 79

   56 mulop: op • '*'
   57      | op • '/'

    '*'  shift, and go to state 98
    '/'  shift, and go to state 99


State 80

   36 switch_stmt: start_switch "switch" • '(' expression ')' fake_save '{' case_stmts default_stmt '}'

    '('  shift, and go to state 100


State 81

   44 var: declare_id pid • ID
   45    | declare_id pid • ID '[' expression ']'
   62 call: declare_id pid • ID '(' args add_args ')'

    ID  shift, and go to state 101


State 82

   61 factor: num NUM •

    $default  reduce using rule 61 (factor)


State 83

    6 var_declaration: type_specifier declare_id pid ID • ';'
    7                | type_specifier declare_id pid ID • '[' size NUM ']' ';'

    ';'  shift, and go to state 14
    '['  shift, and go to state 15


State 84

   58 factor: '(' expression ')' •

    $default  reduce using rule 58 (factor)


State 85

   31 selection_stmt: "if" '(' expression • condition ')' save statement "endif"
   32               | "if" '(' expression • condition ')' save statement "else" jpf_save statement "endif"
   77 condition: ε •

    $default  reduce using rule 77 (condition)

    condition  go to state 102


State 86

   33 iteration_stmt: "while" label '(' • expression condition ')' save statement
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 76 (num)
    $default  reduce using rule 73 (declare_id)

    expression           go to state 103
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    declare_id           go to state 64
    num                  go to state 65


State 87

   35 return_stmt: "return" expression ';' •

    $default  reduce using rule 35 (return_stmt)


State 88

   28 expression_stmt: expression finish_exp ';' •

    $default  reduce using rule 28 (expression_stmt)


State 89

   42 expression: var '=' expression •

    $default  reduce using rule 42 (expression)


State 90

   59 factor: var •

    $default  reduce using rule 59 (factor)


State 91

   46 simple_expression: additive_expression relop additive_expression •  [';', ']', ')', ',']
   50 additive_expression: additive_expression • addop term
   52 addop: • op '+'
   53      | • op '-'
   75 op: ε •  ['+', '-']

    '+'       reduce using rule 75 (op)
    '-'       reduce using rule 75 (op)
    $default  reduce using rule 46 (simple_expression)

    addop  go to state 76
    op     go to state 104


State 92

   50 additive_expression: additive_expression addop term •  [';', ']', ')', ',', '<', "==", '+', '-']
   54 term: term • mulop factor
   56 mulop: • op '*'
   57      | • op '/'
   75 op: ε •  ['*', '/']

    '*'       reduce using rule 75 (op)
    '/'       reduce using rule 75 (op)
    $default  reduce using rule 50 (additive_expression)

    mulop  go to state 78
    op     go to state 79


State 93

   48 relop: op '<' •

    $default  reduce using rule 48 (relop)


State 94

   49 relop: op "==" •

    $default  reduce using rule 49 (relop)


State 95

   52 addop: op '+' •

    $default  reduce using rule 52 (addop)


State 96

   53 addop: op '-' •

    $default  reduce using rule 53 (addop)


State 97

   54 term: term mulop factor •

    $default  reduce using rule 54 (term)


State 98

   56 mulop: op '*' •

    $default  reduce using rule 56 (mulop)


State 99

   57 mulop: op '/' •

    $default  reduce using rule 57 (mulop)


State 100

   36 switch_stmt: start_switch "switch" '(' • expression ')' fake_save '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 76 (num)
    $default  reduce using rule 73 (declare_id)

    expression           go to state 105
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    declare_id           go to state 64
    num                  go to state 65


State 101

   44 var: declare_id pid ID •  [';', ']', ')', ',', '=', '<', "==", '+', '-', '*', '/']
   45    | declare_id pid ID • '[' expression ']'
   62 call: declare_id pid ID • '(' args add_args ')'

    '['  shift, and go to state 106
    '('  shift, and go to state 107

    $default  reduce using rule 44 (var)


State 102

   31 selection_stmt: "if" '(' expression condition • ')' save statement "endif"
   32               | "if" '(' expression condition • ')' save statement "else" jpf_save statement "endif"

    ')'  shift, and go to state 108


State 103

   33 iteration_stmt: "while" label '(' expression • condition ')' save statement
   77 condition: ε •

    $default  reduce using rule 77 (condition)

    condition  go to state 109


State 104

   52 addop: op • '+'
   53      | op • '-'

    '+'  shift, and go to state 95
    '-'  shift, and go to state 96


State 105

   36 switch_stmt: start_switch "switch" '(' expression • ')' fake_save '{' case_stmts default_stmt '}'

    ')'  shift, and go to state 110


State 106

   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   45    | declare_id pid ID '[' • expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 76 (num)
    $default  reduce using rule 73 (declare_id)

    expression           go to state 111
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    declare_id           go to state 64
    num                  go to state 65


State 107

   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   62     | declare_id pid ID '(' • args add_args ')'
   64 args: • arg_list
   65     | ε •  [')']
   66 arg_list: • arg_list ',' expression
   67         | • expression
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 76 (num)
    ID        reduce using rule 73 (declare_id)
    $default  reduce using rule 65 (args)

    expression           go to state 112
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    args                 go to state 113
    arg_list             go to state 114
    declare_id           go to state 64
    num                  go to state 65


State 108

   31 selection_stmt: "if" '(' expression condition ')' • save statement "endif"
   32               | "if" '(' expression condition ')' • save statement "else" jpf_save statement "endif"
   68 save: ε •

    $default  reduce using rule 68 (save)

    save  go to state 115


State 109

   33 iteration_stmt: "while" label '(' expression condition • ')' save statement

    ')'  shift, and go to state 116


State 110

   36 switch_stmt: start_switch "switch" '(' expression ')' • fake_save '{' case_stmts default_stmt '}'
   81 fake_save: ε •

    $default  reduce using rule 81 (fake_save)

    fake_save  go to state 117


State 111

   45 var: declare_id pid ID '[' expression • ']'

    ']'  shift, and go to state 118


State 112

   67 arg_list: expression •

    $default  reduce using rule 67 (arg_list)


State 113

   62 call: declare_id pid ID '(' args • add_args ')'
   63 add_args: ε •

    $default  reduce using rule 63 (add_args)

    add_args  go to state 119


State 114

   64 args: arg_list •  [')']
   66 arg_list: arg_list • ',' expression

    ','  shift, and go to state 120

    $default  reduce using rule 64 (args)


State 115

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression finish_exp ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression condition ')' save statement "endif"
   31               | "if" '(' expression condition ')' save • statement "endif"
   32               | • "if" '(' expression condition ')' save statement "else" jpf_save statement "endif"
   32               | "if" '(' expression condition ')' save • statement "else" jpf_save statement "endif"
   33 iteration_stmt: • "while" label '(' expression condition ')' save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • start_switch "switch" '(' expression ')' fake_save '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   71 start_switch: ε •  ["switch"]
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    ';'       shift, and go to state 42
    '('       shift, and go to state 43
    '{'       shift, and go to state 33
    "break"   shift, and go to state 45
    "if"      shift, and go to state 46
    "while"   shift, and go to state 47
    "return"  shift, and go to state 48

    NUM       reduce using rule 76 (num)
    ID        reduce using rule 73 (declare_id)
    $default  reduce using rule 71 (start_switch)

    compound_stmt        go to state 49
    statement            go to state 121
    expression_stmt      go to state 51
    selection_stmt       go to state 52
    iteration_stmt       go to state 53
    return_stmt          go to state 54
    switch_stmt          go to state 55
    expression           go to state 56
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    start_switch         go to state 63
    declare_id           go to state 64
    num                  go to state 65


State 116

   33 iteration_stmt: "while" label '(' expression condition ')' • save statement
   68 save: ε •

    $default  reduce using rule 68 (save)

    save  go to state 122


State 117

   36 switch_stmt: start_switch "switch" '(' expression ')' fake_save • '{' case_stmts default_stmt '}'

    '{'  shift, and go to state 123


State 118

   45 var: declare_id pid ID '[' expression ']' •

    $default  reduce using rule 45 (var)


State 119

   62 call: declare_id pid ID '(' args add_args • ')'

    ')'  shift, and go to state 124


State 120

   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   66 arg_list: arg_list ',' • expression
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 76 (num)
    $default  reduce using rule 73 (declare_id)

    expression           go to state 125
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    declare_id           go to state 64
    num                  go to state 65


State 121

   31 selection_stmt: "if" '(' expression condition ')' save statement • "endif"
   32               | "if" '(' expression condition ')' save statement • "else" jpf_save statement "endif"

    "endif"  shift, and go to state 126
    "else"   shift, and go to state 127


State 122

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression finish_exp ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression condition ')' save statement "endif"
   32               | • "if" '(' expression condition ')' save statement "else" jpf_save statement "endif"
   33 iteration_stmt: • "while" label '(' expression condition ')' save statement
   33               | "while" label '(' expression condition ')' save • statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • start_switch "switch" '(' expression ')' fake_save '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   71 start_switch: ε •  ["switch"]
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    ';'       shift, and go to state 42
    '('       shift, and go to state 43
    '{'       shift, and go to state 33
    "break"   shift, and go to state 45
    "if"      shift, and go to state 46
    "while"   shift, and go to state 47
    "return"  shift, and go to state 48

    NUM       reduce using rule 76 (num)
    ID        reduce using rule 73 (declare_id)
    $default  reduce using rule 71 (start_switch)

    compound_stmt        go to state 49
    statement            go to state 128
    expression_stmt      go to state 51
    selection_stmt       go to state 52
    iteration_stmt       go to state 53
    return_stmt          go to state 54
    switch_stmt          go to state 55
    expression           go to state 56
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    start_switch         go to state 63
    declare_id           go to state 64
    num                  go to state 65


State 123

   36 switch_stmt: start_switch "switch" '(' expression ')' fake_save '{' • case_stmts default_stmt '}'
   37 case_stmts: • case_stmts case_stmt
   38           | ε •

    $default  reduce using rule 38 (case_stmts)

    case_stmts  go to state 129


State 124

   62 call: declare_id pid ID '(' args add_args ')' •

    $default  reduce using rule 62 (call)


State 125

   66 arg_list: arg_list ',' expression •

    $default  reduce using rule 66 (arg_list)


State 126

   31 selection_stmt: "if" '(' expression condition ')' save statement "endif" •

    $default  reduce using rule 31 (selection_stmt)


State 127

   32 selection_stmt: "if" '(' expression condition ')' save statement "else" • jpf_save statement "endif"
   69 jpf_save: ε •

    $default  reduce using rule 69 (jpf_save)

    jpf_save  go to state 130


State 128

   33 iteration_stmt: "while" label '(' expression condition ')' save statement •

    $default  reduce using rule 33 (iteration_stmt)


State 129

   36 switch_stmt: start_switch "switch" '(' expression ')' fake_save '{' case_stmts • default_stmt '}'
   37 case_stmts: case_stmts • case_stmt
   39 case_stmt: • jp_case "case" case_condition NUM save ':' statement_list
   40 default_stmt: • jp_case "default" ':' statement_list
   41             | ε •  ['}']
   82 jp_case: ε •  ["case", "default"]

    '}'       reduce using rule 41 (default_stmt)
    $default  reduce using rule 82 (jp_case)

    case_stmt     go to state 131
    default_stmt  go to state 132
    jp_case       go to state 133


State 130

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression finish_exp ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression condition ')' save statement "endif"
   32               | • "if" '(' expression condition ')' save statement "else" jpf_save statement "endif"
   32               | "if" '(' expression condition ')' save statement "else" jpf_save • statement "endif"
   33 iteration_stmt: • "while" label '(' expression condition ')' save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • start_switch "switch" '(' expression ')' fake_save '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   71 start_switch: ε •  ["switch"]
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    ';'       shift, and go to state 42
    '('       shift, and go to state 43
    '{'       shift, and go to state 33
    "break"   shift, and go to state 45
    "if"      shift, and go to state 46
    "while"   shift, and go to state 47
    "return"  shift, and go to state 48

    NUM       reduce using rule 76 (num)
    ID        reduce using rule 73 (declare_id)
    $default  reduce using rule 71 (start_switch)

    compound_stmt        go to state 49
    statement            go to state 134
    expression_stmt      go to state 51
    selection_stmt       go to state 52
    iteration_stmt       go to state 53
    return_stmt          go to state 54
    switch_stmt          go to state 55
    expression           go to state 56
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    start_switch         go to state 63
    declare_id           go to state 64
    num                  go to state 65


State 131

   37 case_stmts: case_stmts case_stmt •

    $default  reduce using rule 37 (case_stmts)


State 132

   36 switch_stmt: start_switch "switch" '(' expression ')' fake_save '{' case_stmts default_stmt • '}'

    '}'  shift, and go to state 135


State 133

   39 case_stmt: jp_case • "case" case_condition NUM save ':' statement_list
   40 default_stmt: jp_case • "default" ':' statement_list

    "case"     shift, and go to state 136
    "default"  shift, and go to state 137


State 134

   32 selection_stmt: "if" '(' expression condition ')' save statement "else" jpf_save statement • "endif"

    "endif"  shift, and go to state 138


State 135

   36 switch_stmt: start_switch "switch" '(' expression ')' fake_save '{' case_stmts default_stmt '}' •

    $default  reduce using rule 36 (switch_stmt)


State 136

   39 case_stmt: jp_case "case" • case_condition NUM save ':' statement_list
   80 case_condition: ε •

    $default  reduce using rule 80 (case_condition)

    case_condition  go to state 139


State 137

   40 default_stmt: jp_case "default" • ':' statement_list

    ':'  shift, and go to state 140


State 138

   32 selection_stmt: "if" '(' expression condition ')' save statement "else" jpf_save statement "endif" •

    $default  reduce using rule 32 (selection_stmt)


State 139

   39 case_stmt: jp_case "case" case_condition • NUM save ':' statement_list

    NUM  shift, and go to state 141


State 140

   20 statement_list: • statement_list statement
   21               | ε •
   40 default_stmt: jp_case "default" ':' • statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 142


State 141

   39 case_stmt: jp_case "case" case_condition NUM • save ':' statement_list
   68 save: ε •

    $default  reduce using rule 68 (save)

    save  go to state 143


State 142

   17 compound_stmt: • '{' local_declarations statement_list '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression finish_exp ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression condition ')' save statement "endif"
   32               | • "if" '(' expression condition ')' save statement "else" jpf_save statement "endif"
   33 iteration_stmt: • "while" label '(' expression condition ')' save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • start_switch "switch" '(' expression ')' fake_save '{' case_stmts default_stmt '}'
   40 default_stmt: jp_case "default" ':' statement_list •  ['}']
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   71 start_switch: ε •  ["switch"]
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    ';'       shift, and go to state 42
    '('       shift, and go to state 43
    '{'       shift, and go to state 33
    "break"   shift, and go to state 45
    "if"      shift, and go to state 46
    "while"   shift, and go to state 47
    "return"  shift, and go to state 48

    NUM       reduce using rule 76 (num)
    ID        reduce using rule 73 (declare_id)
    "switch"  reduce using rule 71 (start_switch)
    $default  reduce using rule 40 (default_stmt)

    compound_stmt        go to state 49
    statement            go to state 50
    expression_stmt      go to state 51
    selection_stmt       go to state 52
    iteration_stmt       go to state 53
    return_stmt          go to state 54
    switch_stmt          go to state 55
    expression           go to state 56
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    start_switch         go to state 63
    declare_id           go to state 64
    num                  go to state 65


State 143

   39 case_stmt: jp_case "case" case_condition NUM save • ':' statement_list

    ':'  shift, and go to state 144


State 144

   20 statement_list: • statement_list statement
   21               | ε •
   39 case_stmt: jp_case "case" case_condition NUM save ':' • statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 145


State 145

   17 compound_stmt: • '{' local_declarations statement_list '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression finish_exp ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression condition ')' save statement "endif"
   32               | • "if" '(' expression condition ')' save statement "else" jpf_save statement "endif"
   33 iteration_stmt: • "while" label '(' expression condition ')' save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • start_switch "switch" '(' expression ')' fake_save '{' case_stmts default_stmt '}'
   39 case_stmt: jp_case "case" case_condition NUM save ':' statement_list •  ['}', "case", "default"]
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • declare_id pid ID
   45    | • declare_id pid ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • num NUM
   62 call: • declare_id pid ID '(' args add_args ')'
   71 start_switch: ε •  ["switch"]
   73 declare_id: ε •  [ID]
   76 num: ε •  [NUM]

    ';'       shift, and go to state 42
    '('       shift, and go to state 43
    '{'       shift, and go to state 33
    "break"   shift, and go to state 45
    "if"      shift, and go to state 46
    "while"   shift, and go to state 47
    "return"  shift, and go to state 48

    NUM       reduce using rule 76 (num)
    ID        reduce using rule 73 (declare_id)
    "switch"  reduce using rule 71 (start_switch)
    $default  reduce using rule 39 (case_stmt)

    compound_stmt        go to state 49
    statement            go to state 50
    expression_stmt      go to state 51
    selection_stmt       go to state 52
    iteration_stmt       go to state 53
    return_stmt          go to state 54
    switch_stmt          go to state 55
    expression           go to state 56
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    start_switch         go to state 63
    declare_id           go to state 64
    num                  go to state 65
